# ID Spreadsheet
idSpreadsheetJhipster = 1SQMaSYOKUIeRit8oHl3Hgo92G3LKFA9j7odPCmjs624
idSpreadsheetCoverage = 1T-ayFOUk2tSbLuSyNVhLAaq_pWTqk8k21f0M3bXkxQY
idSpreadsheetCucumber = 10eUZT8wDHlvVfMrerab2KiLqT09ZhEM4g7MZ9BKCUas
idSpreadsheetOracle = 1o0syh0apkGtVb8OoY5bczUOl3fJep4N5oBLkG-HLdmA
idSpreadsheetCucumberDocker = 1Hw-nV7r8npmIC0eb7ogos2GIRAxoaH2Ft_WKM-0U_Yk

# System Properties
useDocker = true

# PHASE ONE : GENERATION
generateJhipster = jhipster 


# PHASE TWO : COMPILATION
compileMaven = ./mvnw compile
compileGradle = ./gradlew compileJava

# PHASE THREE : UNIT TESTING
unitTestMaven = ./mvnw test
unitTestGradle = ./gradlew test

# PHASE FOUR : BUILD
buildMaven = ./mvnw -DskipTests -Pprod
buildGradle = ./gradlew -Pprod



#kafka service related scripts
kafkaService= docker-compose -f src/main/docker/kafka.yml up -d\n
kafkaServiceStop= docker-compose -f src/main/docker/kafka.yml stop\n
kafkaStop= sudo service kafka stop\n

#consul service related scripts
consulService= docker-compose -f src/main/docker/consul.yml up -d\n
consulServiceStop= docker-compose -f src/main/docker/consul.yml stop\n

#Swagger service related scripts
swaggerService=docker-compose -f src/main/docker/swagger-editor.yml up -d\n
swaggerServiceStop=docker-compose -f src/main/docker/swagger-editor.yml stop\n

#Registry service related scripts
registryService=docker-compose -f src/main/docker/jhipster-registry.yml up -d\n
registryServiceStop=docker-compose -f src/main/docker/jhipster-registry.yml stop\n

#Elasticsearch service  related scripts

elasticService = docker-compose -f src/main/docker/elasticsearch.yml up -d\n
elasticSearchStop= docker-compose -f src/main/docker/elasticsearch.yml stop\n








# Database related scripts
mysqlService = sudo service mysql restart\n
mysqlInitiateConnexion = mysql -u root <<EOF\n
mysqlCloseConnexion = \\q\nEOF\n
mysqlCreateDatabase = create database if not exists jhipster;\n
mysqlDropDatabase = drop database if exists jhipster;\n
mysqlStop = sudo service mysql stop\n
mysqlFlush = FLUSH TABLES;\n
mysqlServiceStop= docker-compose -f src/main/docker/mysql.yml stop\n
mysqlServiceStart = docker-compose -f src/main/docker/mysql.yml up -d\n


mariaDBServiceStop= docker-compose -f src/main/docker/mariadb.yml stop\n
mariaDBServiceStart = docker-compose -f src/main/docker/mariadb.yml up -d\n








mssqlService =  sudo service  mssql-server restart\n
mssqlInitiateConnexion = sqlcmd -S localhost -U SA -P 'root4242.'<<EOF\n
mssqlCloseConnexion = \\q\nEOF\n
mssqlCreateDatabase = if not exists(SELECT 1 FROM sys.databases WHERE name = N'jhipster') create database jhipster;\n GO \n
mssqlDropDatabase = drop database if exists jhipster;\n  GO \n
mssqlStop =  sudo service  mssql-server stop\n
mssqlFlush = FLUSH TABLES;\n  GO \n
mssqlServiceStop= docker-compose -f src/main/docker/mssql.yml stop\n
mssqlServiceStart = docker-compose -f src/main/docker/mssql.yml up -d\n

cassandraService =sudo service cassandra restart\n
cassandraCreateKeySpace = cqlsh -f src/main/resources/config/cql/create-keyspace.cql\n 
cassandraCreateTables = cqlsh -f src/main/resources/config/cql/changelog/00000000000000_create-tables.cql -k jhipster\n
cassandraInsertUsers = cqlsh -f src/main/resources/config/cql/changelog/00000000000001_insert_default_users.cql -k jhipster\n
cassandraStop = sudo service cassandra stop\n
cassandraDropKeySpace = cqlsh -f src/main/resources/config/cql/drop-keyspace.cql\n
cassandraExport = sudo export CASSANDRA_CONTACT_POINT="127.0.0.1"\n
cassandraServiceStop= docker-compose -f src/main/docker/cassandra.yml stop\n
cassandraServiceStart = docker-compose -f src/main/docker/cassandra.yml up -d\n

mongodbService = sudo service mongod start\n
mongodbStop = sudo service mongod stop\n
mongoDBServiceStop= docker-compose -f src/main/docker/mongodb.yml stop\n
mongodbServiceStart = docker-compose -f src/main/docker/mongodb.yml up -d\n

postgreService = sudo service postgresql start\n
postgreInitiateConnexion = psql -U postgres <<EOF\n
postgreCloseConnexion = \\q\nEOF\n
postgreCreateRole = create role jhipster login;\n
postgreCreateDatabase = create database jhipster;\n
postgreDropDatabase =  drop database if exists  jhipster;\n
postgreStop = sudo service postgresql stop\n
postgresServiceStop= docker-compose -f src/main/docker/postgresql.yml stop\n
postgresServiceStart = docker-compose -f src/main/docker/postgresql.yml up -d\n

oracleInitJar =  cp ../../oracle-jar/ojdbc-7.jar lib/oracle/ojdbc/7/
oracleService = docker run -d -p 1521:1521 sath89/oracle-12c\n

sleep = sleep 45\n

# Docker Scripts
#cassandraMigration = docker-compose -f src/main/docker/cassandra.yml up jhipster-cassandra-migration
dockerStart = docker-compose -f src/main/docker/app.yml up
mavenDockerPackage = ./mvnw -DskipTests package -Pprod docker:build
gradleDockerPackage = ./gradlew bootRepackage -x test -Pprod buildDocker

# PHASE FIVE : TESTING


# PHASE SIX : CLEAN UP
dockerStop = docker-compose -f src/main/docker/app.yml stop
#dockerStopMysql = docker stop jhipster-mysql
#dockerStopPostgre = docker stop jhipster-postgresql
#dockerStopMaria = docker stop jhipster-mariadb
#dockerStopCassanda = docker stop jhipster-cassandra
#dockerStopMongo = docker stop jhipster-mongo
#dockerStopMssql = docker stop jhipster-mssql


dockerRemoveAll = docker rm $(docker ps -a -q)
dockerRemoveImages = docker rmi $(docker images -q)
dockerServicesStop= docker stop $(docker ps -a -q)
killApp = fuser -k 8080/tcp
killRegistry = fuser -k 8761/tcp
killUAA = fuser -k 9999/tcp


# Entities related scripts
importJDL = cp ../../jhipster-jdl.jh .
importJDLMongo = cp ../../jhipster-jdl-mongodb.jh .
importJDLCassandra = cp ../../jhipster-jdl-cassandra.jh .
generateJDL = echo "a" | jhipster import-jdl jhipster-jdl.jh


# Gatling tests script
removeGatlingSimulations = shopt -s extglob\ncd src/test/gatling/simulations\nrm !(E*)\ncd ../../../..\n

# Init script: put node_modules in the directory
init = cp -R ../../node_modules/ .\nchmod 777 -R node_modules/\n
